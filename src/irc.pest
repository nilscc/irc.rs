// In comments is the message definition, as defined in the Modern IRCv3 definition:
// https://modern.ircdocs.horse/#message-format

// message         ::= ['@' <tags> SPACE] [':' <source> SPACE] <command> <parameters> <crlf>
// SPACE           ::=  %x20 *( %x20 )   ; space character(s)
// crlf            ::=  %x0D %x0A        ; "carriage return" "linefeed"

WHITESPACE = _{ " " }

message  =  { tags? ~ source? ~ msg_type ~ crlf? }
crlf     = _{ "\x0D\x0A" }
msg_type =  { msg_cap | generic_message }

generic_message = { command ~ parameters }

// <tags>          ::= <tag> [';' <tag>]*
// <tag>           ::= <key> ['=' <escaped value>]
// <key>           ::= [ <client_prefix> ] [ <vendor> '/' ] <sequence of letters, digits, hyphens (`-`)>
// <client_prefix> ::= '+'
// <escaped value> ::= <sequence of any characters except NUL, CR, LF, semicolon (`;`) and SPACE>
// <vendor>        ::= <host>

tags          = ${ at ~ tag ~ (semicolon ~ tag)* }
tag           = ${ key ~ (assignment ~ escaped_value?)? }
key           = ${ client_prefix? ~ (vendor ~ "/")? ~ key_chars }
key_chars     = @{ (LETTER | NUMBER | "-")+ }
escaped_value = @{ nospcrlfscl+ }
vendor        = @{ (!"/" ~ nospcrlf)+ }

client_prefix = _{ "+" }
semicolon     = _{ ";" }
assignment    = _{ "=" }

// source          ::=  <servername> / ( <nickname> [ "!" <user> ] [ "@" <host> ] )
// nick            ::=  <any characters except NUL, CR, LF, chantype
// character, and SPACE> <possibly empty sequence of any characters except
// NUL, CR, LF, and SPACE>
// user            ::=  <sequence of any characters except NUL, CR, LF, and SPACE>

source = ${ colon ~ name ~ (exclamation ~ user)? ~ (at ~ host)? }
// TODO: hmmm
name = @{ (!("/" | "!" | "@") ~ nospcrlf)+ }
user = @{ (!"@" ~ nospcrlf)+ }
host = @{ nospcrlf+ }

chantype    = _{ "#" | "&" }
exclamation = _{ "!" }
at          = _{ "@" }

// command         ::=  letter* / 3digit

command = ${ ASCII_ALPHA+ | digit3 }
digit3  = @{ NUMBER{3} }

// parameters      ::=  *( SPACE middle ) [ SPACE ":" trailing ]
// nospcrlfcl      ::=  <sequence of any characters except NUL, CR, LF, colon (`:`) and SPACE>
// middle          ::=  nospcrlfcl *( ":" / nospcrlfcl )
// trailing        ::=  *( ":" / " " / nospcrlfcl )

parameters = { middle* ~ trailing? }

middle         = @{ nospcrlfcl ~ nospcrlf* }
trailing       = ${ colon ~ trailing_inner }
trailing_inner = @{ nocrlf* }

colon = _{ ":" }

// TODO: check with unit tests if we really need to explicitely exclude spaces
nospcrlfscl = @{ !("\0" | "\r" | "\n" | " " | ";") ~ ANY }
nospcrlfcl  = @{ !("\0" | "\r" | "\n" | " " | ":") ~ ANY }
nospcrlf    = @{ !("\0" | "\r" | "\n" | " ") ~ ANY }
nocrlf      = @{ !("\0" | "\r" | "\n") ~ ANY }

// 
// specific messages. these should only list the messages received from the
// server, not messages sent to the server.
// 

msg_cap  = { "CAP" ~ cap_nick ~ cap_cmd }
cap_nick = ${ star | nospcrlf+ }
cap_cmd  = {
    cap_ls
  | cap_list
  | cap_ack
  | cap_nak
  | cap_new
  | cap_del
}
cap_ls   = { "LS" ~ multiline? ~ colon ~ capability* }
cap_list = { "LIST" ~ multiline? ~ colon ~ capability* }
cap_ack  = { "ACK" ~ colon ~ capability+ }
cap_nak  = { "NAK" ~ colon ~ capability+ }
cap_new  = { "NEW" ~ colon ~ capability+ }
cap_del  = { "DEL" ~ colon ~ capability+ }

capability = ${ minus? ~ cap_key ~ (assignment ~ cap_values)? }
cap_key    = @{ (!"=" ~ nospcrlf)+ }
cap_values = ${ cap_value ~ ("," ~ cap_value)* }
cap_value  = @{ (!"," ~ nospcrlf)+ }

multiline = @{ star }

star  = { "*" }
minus = { "-" }
